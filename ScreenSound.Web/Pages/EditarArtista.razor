@page "/EditarArtista/{NomeArtista}"

@inject ArtistasAPI artistasAPI
@inject NavigationManager navigationManager

<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8" Justify="Justify.Center">

    <MudText Class="mt-8" Typo="Typo.h4">Cadastro do Artista</MudText>

    <MudForm>

        <MudTextField Class="mt-4" T="string" Placeholder="Nome do Artista"
                      Variant="Variant.Outlined"
                      @bind-Value="nome"
                      Required="true"
                      RequiredError="Campo obrigatório." />

        <MudTextField Class="mt-4" T="string" Placeholder="Biografia do artista"
                      Variant="Variant.Outlined"
                      @bind-Value="biografia"
                      Lines="4"
                      Required="true"
                      RequiredError="Campo obrigatório." />
        <MudImage Class="mt-4" src="@fileImage" />
        <MudFileUpload T="IBrowserFile" Accept=".jpeg" FilesChanged="UploadFile">
            <ButtonTemplate>
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.PhotoCamera"
                           for="@context">
                    Foto de Perfil
                </MudButton>
                <MudButton OnClick="@Clear"
                           Color="Color.Error"
                           Disabled="@(fotoPerfil is null)"
                           Variant="Variant.Filled">
                    Clear
                </MudButton>
            </ButtonTemplate>
        </MudFileUpload>
        <div class="d-flex align-center justify-end mt-4">
            <MudButton Variant="Variant.Filled"
                       @onclick="Editar"
                       Color="Color.Success"
                       Class="ml-auto">
                Salvar Alterações
            </MudButton>
            <MudButton Variant="Variant.Filled"
                       @onclick="Retornar"
                       Color="Color.Primary"
                       Class="ml-2">
                Voltar
            </MudButton>
        </div>

    </MudForm>
</MudPaper>

@code {
    private string? nome;
    private string? biografia;
    [Parameter]
    public string? NomeArtista { get; set; }

    public ArtistaResponse? Artista { get; set; }

    private string? fileImage;
    private string? fotoPerfil;

    protected override async Task OnInitializedAsync()
    {
        Artista = await artistasAPI.GetArtistaPorNomeAsync(NomeArtista!);
        nome = Artista!.Nome;
        biografia = Artista!.Bio;
    }

    private async Task Editar()
    {

        string foto = Artista.FotoPerfil;
        if (fotoPerfil is not null)
        {
            foto = fotoPerfil;
        }
        Console.WriteLine($"foto Perfil -> {fotoPerfil}");
        Console.WriteLine($"foto -> {foto}");
        var request = new ArtistaRequestEdit(Artista!.Id, nome!, biografia!, foto);
        await artistasAPI.EditArtistaAsync(request);
        navigationManager.NavigateTo("/Artistas");
    }

    private void Retornar()
    {
        navigationManager.NavigateTo("/Artistas");
    }

    private void Clear()
    {
        fileImage = null;
        fotoPerfil = null;
    }

    private async Task UploadFile(IBrowserFile file)
    {
        long maxFIleSize = 1024 * 1024 * 15;
        var format = "image/jpeg";
        var resizedImage = await file.RequestImageFileAsync(format, 200, 200);

        using var fileStream = resizedImage.OpenReadStream();
        using var memoryStream = new MemoryStream();
        await fileStream.CopyToAsync(memoryStream);

        var imageUpload = Convert.ToBase64String(memoryStream.ToArray());

        fileImage = $"data:{format};base64,{imageUpload}";
        fotoPerfil = imageUpload;
    }
}