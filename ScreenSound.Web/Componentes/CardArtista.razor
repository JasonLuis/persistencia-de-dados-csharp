@inject IDialogService DialogService
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration

<MudCard>
    <MudCardMedia Image="@ImageComputed"></MudCardMedia>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@Artista!.Nome</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudText Typo="Typo.body2">@Artista!.Bio</MudText>
    </MudCardContent>
    <MudCardActions>
       <MudButton Color="Color.Warning" Variant="Variant.Outlined" Href=@($"/EditarArtista/{Artista!.Nome}")>
          Detalhes
       </MudButton>
       <MudButton Class="ml-4" Color="Color.Error" Variant="Variant.Filled" OnClick="() => OpenDialog(Artista)">
                Deletar
       </MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter]
    public ArtistaResponse? Artista { get; set; }

    // public string? Imagem { get; set; }

    [Parameter]
    public EventCallback<int> ValueId { get; set; }


    private string apiUrl => Configuration!.GetSection("APIServer:Url").Value;
    private string ImageComputed => Artista!.FotoPerfil!.Contains("Foto") ? $"{apiUrl}/{Artista!.FotoPerfil}" : "images/cardArtista.png";

    private async Task OpenDialog(ArtistaResponse artistaResponse)
    {
        var options = new DialogOptions { NoHeader = false };
        var parameters = new DialogParameters<DialogDelete<int>>();
        parameters.Add(d => d.Value, artistaResponse.Id);
        parameters.Add(d => d.title, $"Deseja excluir o artista {artistaResponse.Nome}");

        var reference = DialogService.Show<DialogDelete<int>>("Deletar Artista", parameters, options);
        await reference.GetReturnValueAsync<int>();
        var result = await reference.Result;
        await ValueId.InvokeAsync(Convert.ToInt32(result.Data));
    }
}